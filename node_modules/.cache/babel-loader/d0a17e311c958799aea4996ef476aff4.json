{"ast":null,"code":"// import {\n//     Grid,\n//     TextField,\n//     IconButton,\n//     Icon,\n//     Button,\n//     TableHead,\n//     TableCell,\n//     TableRow,\n//     Checkbox,\n//     TablePagination,\n//     Tooltip,\n//     FormControl,\n//     Input, InputAdornment,\n//   } from '@material-ui/core'\n//   import { createMuiTheme } from '@material-ui/core/styles'\n//   import React, { Component,useState, useEffect } from 'react'\n//   import { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\n//   import MaterialTable, {\n//     MTableToolbar,\n//     Chip,\n//     MTableBody,\n//     MTableHeader,\n//   } from 'material-table'\n//   import { useTranslation, withTranslation, Trans } from 'react-i18next'\n//   import {\n//     getFlatRootChild,\n//     getAllByRoot,\n//     deleteItem,\n//     searchEmployee,\n//     createEmployee,\n//     saveItem,\n//     getItemById,\n//     getAllItem,\n//     deleteCheckItem\n//   } from './EmployeeService'\n// //   import EmployeeDialog from './EmployeeDialog'\n//   import { Breadcrumb, ConfirmationDialog } from 'egret'\n//   import { Helmet } from 'react-helmet'\n//   import { withStyles } from '@material-ui/core/styles'\n//   import SearchIcon from '@material-ui/icons/Search'; \n//   import { Link } from \"react-router-dom\";\n//   import NotificationPopup from '../Component/NotificationPopup/NotificationPopup'\n//   const LightTooltip = withStyles((theme) => ({\n//     tooltip: {\n//       backgroundColor: theme.palette.common.white,\n//       color: 'rgba(0, 0, 0, 0.87)',\n//       boxShadow: theme.shadows[1],\n//       fontSize: 11,\n//       position: \"absolute\",\n//       top: '-15px',\n//       left: '-30px',\n//       width: '80px'\n//     }\n//   }))(Tooltip);\n//   function MaterialButton(props) {\n//     const { t, i18n } = useTranslation()\n//     const item = props.item\n//     return (\n//       <div className=\"none_wrap\">\n//         <LightTooltip title={t('general.editIcon')} placement=\"right-end\" enterDelay={300} leaveDelay={200}>\n//           <IconButton size=\"small\" onClick={() => props.onSelect(item, 0)}>\n//             <Icon fontSize=\"small\" color=\"primary\">edit</Icon>\n//           </IconButton>\n//         </LightTooltip>\n//         <LightTooltip title={t('general.deleteIcon')} placement=\"right-end\" enterDelay={300} leaveDelay={200}>\n//           <IconButton size=\"small\" onClick={() => props.onSelect(item, 1)}>\n//             <Icon fontSize=\"small\" color=\"error\">delete</Icon>\n//           </IconButton>\n//         </LightTooltip>\n//       </div>\n//     )\n//   }\n//   class Employee extends React.Component {\n//     state = {\n//       rowsPerPage: 5,\n//       page: 0,\n//       data: [],\n//       totalElements: 0,\n//       itemList: [],\n//       shouldOpenEditorDialog: false,\n//       shouldOpenConfirmationDialog: false,\n//       shouldOpenConfirmationDeleteAllDialog: false,\n//       keyword: '',\n//       shouldOpenNotificationPopup: false,\n//       Notification: ''\n//     }\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//           employees: [],\n//           showForm: false,\n//           name: \"\",\n//           email: \"\",\n//           age: \"\",\n//           address: \"\",\n//           code:\"\",\n//           commune:\"\",\n//           district:\"\",\n//           province:\"\"\n//         };\n//       this.handleTextChange = this.handleTextChange.bind(this)\n//     }\n//     handleTextChange(event) {\n//       this.setState({ keyword: event.target.value })\n//     }\n//     handleKeyDownEnterSearch = (e) => {\n//       if (e.key === 'Enter') {\n//         this.search()\n//       }\n//     }\n//     async componentDidMount() {\n//         const searchObject = {\n//             name:'',\n//             id:'',\n//             email:'',\n//             age:'',\n//             code:'',\n//             phone:''\n//           }; // assume we have an employee ID\n//           const employee = await searchEmployee(searchObject);\n//           this.setState({ employee });\n//           console.log(\"khanh\");\n//           searchEmployee({})\n//             .then(res =>{\n//               console.log(res.data.data);\n//               this.setState({\n//                 employees:res.data.data\n//               });\n//             })\n//       this.updatePageData()\n//     }\n//     getListItemChild(item) {\n//       var result = [];\n//       var root = {};\n//       root.name = item.name;\n//       root.description = item.description;\n//       root.code = item.code;\n//       root.icon = item.icon;\n//       root.path = item.path;\n//       root.id = item.id;\n//       root.parentId = item.parentId;\n//       result.push(root);\n//       if (item.children) {\n//         item.children.forEach(child => {\n//           var childs = this.getListItemChild(child);\n//           result.push(...childs);\n//         });\n//       }\n//       return result;\n//     }\n//     updatePageData = () => {\n//       var searchObject = {}\n//       searchObject.keyword = ''\n//       searchObject.pageIndex = this.state.page + 1\n//       searchObject.pageSize = this.state.rowsPerPage\n//       getAllByRoot().then(({ data }) => {\n//         var itemList = [...data];\n//         var list = [];\n//         itemList.forEach(item => {\n//           var items = this.getListItemChild(item);\n//           list.push(...items);\n//         });\n//         this.setState({ itemList: list });\n//       })\n//     }\n//     setPage = (page) => {\n//       this.setState({ page }, function () {\n//         this.updatePageData()\n//       })\n//     }\n//     setRowsPerPage = (event) => {\n//       this.setState({ rowsPerPage: event.target.value, page: 0 }, function () {\n//         this.updatePageData()\n//       })\n//     }\n//     handleChangePage = (event, newPage) => {\n//       this.setPage(newPage)\n//     }\n//     handleOKEditClose = () => {\n//       this.setState(\n//         {\n//           shouldOpenEditorDialog: false,\n//           shouldOpenConfirmationDialog: false,\n//         },\n//         () => {\n//           this.updatePageData()\n//         }\n//       )\n//     }\n//     handleDelete = (id) => {\n//       this.setState({\n//         id,\n//         shouldOpenConfirmationDialog: true,\n//       })\n//     }\n//     handleDialogClose = () => {\n//       this.setState(\n//         {\n//           shouldOpenEditorDialog: false,\n//           shouldOpenConfirmationDialog: false,\n//           shouldOpenConfirmationDeleteAllDialog: false,\n//           shouldOpenNotificationPopup: false,\n//           data: [],\n//         },\n//         () => {\n//           this.updatePageData()\n//         }\n//       )\n//     }\n//     handleOKEditClose = () => {\n//       this.setState({\n//         shouldOpenEditorDialog: false,\n//         shouldOpenConfirmationDialog: false,\n//         shouldOpenConfirmationDeleteAllDialog: false,\n//       })\n//       this.setPage(0)\n//     }\n//     handleDelete = (id) => {\n//       this.setState({\n//         id,\n//         shouldOpenConfirmationDialog: true,\n//       })\n//     }\n//     handleConfirmationResponse = () => {\n//       if (this.state.itemList.length === 1 && this.state.page === 1) {\n//         let count = this.state.page - 1\n//         this.setState({\n//           page: count,\n//         })\n//       }\n//       deleteItem(this.state.id).then(() => {\n//         this.updatePageData();\n//         this.handleDialogClose()\n//       })\n//     }\n//     handleEditItem = (item) => {\n//       this.setState({\n//         item: item,\n//         shouldOpenEditorDialog: true,\n//       })\n//     }\n//     handleDeleteButtonClick = () => {\n//       if (\n//         typeof this.state.data === 'undefined' ||\n//         this.state.data.length === 0\n//       ) {\n//         this.setState({\n//           shouldOpenNotificationPopup: true,\n//           Notification: \"general.noti_check_data\"\n//         })\n//         // alert('Chưa chọn dữ liệu')\n//       } else {\n//         this.setState({ shouldOpenConfirmationDeleteAllDialog: true })\n//       }\n//     }\n//     handleDeleteAll = (event) => {\n//       this.handleDeleteList(this.state.data).then(() => {\n//         this.updatePageData()\n//         // this.handleDialogClose()\n//       })\n//     }\n//     render() {\n//         const { t, i18n } = this.props\n//         let { keyword, shouldOpenNotificationPopup } = this.state\n//         const { employees } = this.state;\n//         let TitlePage = t('menu.title')\n//         let columns = [\n//             {\n//                 title: t('general.action'),\n//                 field: 'custom',\n//                 align: 'left',\n//                 width: '120px',\n//                 headerStyle: {\n//                   minWidth: \"100px\",\n//                   paddingLeft: \"0px\",\n//                   paddingRight: \"0px\",\n//                 },\n//                 cellStyle: {\n//                   minWidth: \"100px\",\n//                   paddingLeft: \"0px\",\n//                   paddingRight: \"0px\",\n//                   textAlign: \"left\",\n//                 },\n//                 render: (rowData) => (\n//                   <MaterialButton\n//                     item={rowData}\n//                     onSelect={(rowData, method) => {\n//                       if (method === 0) {\n//                         getItemById(rowData.id).then(({ data }) => {\n//                           if (data.parent === null) {\n//                             data.parent = {}\n//                           }\n//                           this.setState({\n//                             item: data,\n//                             shouldOpenEditorDialog: true,\n//                           })\n//                         })\n//                       } else if (method === 1) {\n//                         this.handleDelete(rowData.id)\n//                       } else {\n//                         alert('Call Selected Here:' + rowData.id)\n//                       }\n//                     }}\n//                   />\n//                 ),\n//               },\n//             { title: \"ID\", field: \"id\" },\n//             { title: \"Name\", field: \"name\" },\n//             { title: \"Age\", field: \"age\" },\n//           {\n//             title: t('menu.name'), field: 'name', width: '150',\n//             headerStyle: {\n//               minWidth: \"150px\",\n//               paddingLeft: \"10px\",\n//               paddingRight: \"0px\",\n//             },\n//             cellStyle: {\n//               minWidth: \"150px\",\n//               paddingLeft: \"10px\",\n//               paddingRight: \"0px\",\n//               textAlign: \"left\",\n//             },\n//           },\n//           {\n//             title: t('menu.code'), field: 'code', align: 'left', width: '150',\n//             headerStyle: {\n//               minWidth: \"100px\",\n//               paddingLeft: \"10px\",\n//               paddingRight: \"0px\",\n//             },\n//             cellStyle: {\n//               minWidth: \"100px\",\n//               paddingLeft: \"10px\",\n//               paddingRight: \"0px\",\n//               textAlign: \"left\",\n//             },\n//           },\n//         ]\n//         return (\n//           <div className=\"m-sm-30\">\n//             <Helmet>\n//               <title>{TitlePage} | {t('web_site')}</title>\n//             </Helmet>\n//             <div className=\"mb-sm-30\">\n//               {/* <Breadcrumb routeSegments={[{ name: t('Supplier.title') }]} /> */}\n//               <Breadcrumb\n//                 routeSegments={[\n//                   { name: t(\"Dashboard.manage\"), path: \"/directory/apartment\" },\n//                   { name: TitlePage },\n//                 ]}\n//               />\n//             </div>\n//             <Grid container spacing={2} justify=\"space-between\">\n//               <Grid item lg={3} md={3} xs={12} >\n//                 <Button\n//                   className=\"align-bottom mr-16 mb-16\"\n//                   variant=\"contained\"\n//                   color=\"primary\"\n//                   onClick={() => this.handleEditItem(null)}\n//                 >\n//                   {t('general.add')}\n//                 </Button>\n//                 {/* <Button\n//                   className=\"align-bottom mb-16\"\n//                   variant=\"contained\"\n//                   color=\"primary\"\n//                   onClick={this.handleDeleteButtonClick}\n//                 >\n//                   {t('general.delete')}\n//                 </Button> */}\n//                 {this.state.shouldOpenConfirmationDeleteAllDialog && (\n//                   <ConfirmationDialog\n//                     open={this.state.shouldOpenConfirmationDeleteAllDialog}\n//                     onConfirmDialogClose={this.handleDialogClose}\n//                     onYesClick={this.handleDeleteAll}\n//                     text={t('general.deleteAllConfirm')}\n//                     cancel={t('general.cancel')}\n//                     agree={t('general.agree')}\n//                   />\n//                 )}\n//                 {/* <TextField\n//                   label={t('Supplier.search')}\n//                   className=\"mb-16 mr-10\"\n//                   style={{ width: '20%' }}\n//                   type=\"text\"\n//                   name=\"keyword\"\n//                   value={keyword}\n//                   onChange={this.handleTextChange}\n//                   onKeyDown={this.handleKeyDownEnterSearch}\n//                 />\n//                 <Button\n//                   className=\"mb-16 mr-16 align-bottom\"\n//                   variant=\"contained\"\n//                   color=\"primary\"\n//                   onClick={() => this.search(keyword)}\n//                 >\n//                   {t('general.search')}\n//                 </Button> */}\n//               </Grid>\n//               {/* <Grid item md={6} sm={12} xs={12} >\n//                 <FormControl fullWidth style={{marginTop:'6px'}}>\n//                     <Input\n//                         className='search_box w-100'\n//                         onChange={this.handleTextChange}\n//                         onKeyDown={this.handleKeyDownEnterSearch}\n//                         placeholder={t(\"Supplier.search\")}\n//                         id=\"search_box\"\n//                         startAdornment={\n//                             <InputAdornment>\n//                                  <Link> <SearchIcon \n//                                 onClick={() => this.search(keyword)}\n//                                 style ={{position:\"absolute\",\n//                                 top:\"0\",\n//                                 right:\"0\"\n//                               }} /></Link>\n//                             </InputAdornment>\n//                         }\n//                     />\n//                 </FormControl>\n//               </Grid> */}\n//               <Grid item xs={12}>\n//                 <div>\n//                   {/* {this.state.shouldOpenEditorDialog && (\n//                     <EmployeeDialog\n//                       t={t}\n//                       i18n={i18n}\n//                       handleClose={this.handleDialogClose}\n//                       open={this.state.shouldOpenEditorDialog}\n//                       handleOKEditClose={this.handleOKEditClose}\n//                       item={this.state.item}\n//                     />\n//                   )} */}\n//                   {shouldOpenNotificationPopup && (\n//                     <NotificationPopup\n//                       title={t('general.noti')}\n//                       open={shouldOpenNotificationPopup}\n//                       // onConfirmDialogClose={this.handleDialogClose}\n//                       onYesClick={this.handleDialogClose}\n//                       text={t(this.state.Notification)}\n//                       agree={t('general.agree')}\n//                     />\n//                   )}\n//                   {this.state.shouldOpenConfirmationDialog && (\n//                     <ConfirmationDialog\n//                       title={t(\"confirm\")}\n//                       open={this.state.shouldOpenConfirmationDialog}\n//                       onConfirmDialogClose={this.handleDialogClose}\n//                       onYesClick={this.handleConfirmationResponse}\n//                       text={t(\"DeleteConfirm\")}\n//                       Yes={t(\"general.Yes\")}\n//                       No={t(\"general.No\")}\n//                     />\n//                   )}\n//                 </div>\n//                 <MaterialTable\n//         title=\"Employee List\"\n//         data={employees}\n//         columns={columns}\n//         options={{\n//           selection: false,\n//           actionsColumnIndex: -1,\n//           paging: false,\n//           search: false,\n//           rowStyle: (rowData, index) => ({\n//             backgroundColor: index % 2 === 1 ? '#EEE' : '#FFF',\n//           }),\n//           maxBodyHeight: '450px',\n//           minBodyHeight: '370px',\n//           headerStyle: {\n//             backgroundColor: '#358600',\n//             color: '#fff',\n//           },\n//           padding: 'dense',\n//           toolbar: false,\n//         }}\n//         components={{\n//           Toolbar: (props) => <MTableToolbar {...props} />,\n//         }}\n//         onSelectionChange={(rows) => {\n//           this.setState({ data: rows });\n//         }}\n//       />\n//                 <TablePagination\n//                   align=\"left\"\n//                   className=\"px-16\"\n//                   rowsPerPageOptions={[1, 2, 3, 5, 10, 25]}\n//                   component=\"div\"\n//                   labelRowsPerPage={t('general.rows_per_page')}\n//                   labelDisplayedRows={({ from, to, count }) => `${from}-${to} ${t('general.of')} ${count !== -1 ? count : `more than ${to}`}`}\n//                   count={this.state.totalElements}\n//                   rowsPerPage={this.state.rowsPerPage}\n//                   page={this.state.page}\n//                   backIconButtonProps={{\n//                     'aria-label': 'Previous Page',\n//                   }}\n//                   nextIconButtonProps={{\n//                     'aria-label': 'Next Page',\n//                   }}\n//                   onChangePage={this.handleChangePage}\n//                   onChangeRowsPerPage={this.setRowsPerPage}\n//                 />\n//               </Grid>\n//             </Grid>\n//           </div>\n//         )\n//       }\n//     }\n//     export default Employee;","map":{"version":3,"sources":["D:/client/src/app/views/Employee/Employee.jsx"],"names":[],"mappingssourcesContent":["// import {\r\n//     Grid,\r\n//     TextField,\r\n//     IconButton,\r\n//     Icon,\r\n//     Button,\r\n//     TableHead,\r\n//     TableCell,\r\n//     TableRow,\r\n//     Checkbox,\r\n//     TablePagination,\r\n//     Tooltip,\r\n//     FormControl,\r\n//     Input, InputAdornment,\r\n//   } from '@material-ui/core'\r\n//   import { createMuiTheme } from '@material-ui/core/styles'\r\n//   import React, { Component,useState, useEffect } from 'react'\r\n//   import { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\r\n//   import MaterialTable, {\r\n//     MTableToolbar,\r\n//     Chip,\r\n//     MTableBody,\r\n//     MTableHeader,\r\n//   } from 'material-table'\r\n//   import { useTranslation, withTranslation, Trans } from 'react-i18next'\r\n//   import {\r\n//     getFlatRootChild,\r\n//     getAllByRoot,\r\n//     deleteItem,\r\n//     searchEmployee,\r\n//     createEmployee,\r\n//     saveItem,\r\n//     getItemById,\r\n//     getAllItem,\r\n//     deleteCheckItem\r\n//   } from './EmployeeService'\r\n// //   import EmployeeDialog from './EmployeeDialog'\r\n//   import { Breadcrumb, ConfirmationDialog } from 'egret'\r\n//   import { Helmet } from 'react-helmet'\r\n//   import { withStyles } from '@material-ui/core/styles'\r\n//   import SearchIcon from '@material-ui/icons/Search'; \r\n//   import { Link } from \"react-router-dom\";\r\n//   import NotificationPopup from '../Component/NotificationPopup/NotificationPopup'\r\n//   const LightTooltip = withStyles((theme) => ({\r\n//     tooltip: {\r\n//       backgroundColor: theme.palette.common.white,\r\n//       color: 'rgba(0, 0, 0, 0.87)',\r\n//       boxShadow: theme.shadows[1],\r\n//       fontSize: 11,\r\n//       position: \"absolute\",\r\n//       top: '-15px',\r\n//       left: '-30px',\r\n//       width: '80px'\r\n//     }\r\n//   }))(Tooltip);\r\n//   function MaterialButton(props) {\r\n//     const { t, i18n } = useTranslation()\r\n//     const item = props.item\r\n//     return (\r\n//       <div className=\"none_wrap\">\r\n//         <LightTooltip title={t('general.editIcon')} placement=\"right-end\" enterDelay={300} leaveDelay={200}>\r\n//           <IconButton size=\"small\" onClick={() => props.onSelect(item, 0)}>\r\n//             <Icon fontSize=\"small\" color=\"primary\">edit</Icon>\r\n//           </IconButton>\r\n//         </LightTooltip>\r\n//         <LightTooltip title={t('general.deleteIcon')} placement=\"right-end\" enterDelay={300} leaveDelay={200}>\r\n//           <IconButton size=\"small\" onClick={() => props.onSelect(item, 1)}>\r\n//             <Icon fontSize=\"small\" color=\"error\">delete</Icon>\r\n//           </IconButton>\r\n//         </LightTooltip>\r\n//       </div>\r\n//     )\r\n//   }\r\n//   class Employee extends React.Component {\r\n//     state = {\r\n//       rowsPerPage: 5,\r\n//       page: 0,\r\n//       data: [],\r\n//       totalElements: 0,\r\n//       itemList: [],\r\n//       shouldOpenEditorDialog: false,\r\n//       shouldOpenConfirmationDialog: false,\r\n//       shouldOpenConfirmationDeleteAllDialog: false,\r\n//       keyword: '',\r\n//       shouldOpenNotificationPopup: false,\r\n//       Notification: ''\r\n//     }\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//           employees: [],\r\n//           showForm: false,\r\n//           name: \"\",\r\n//           email: \"\",\r\n//           age: \"\",\r\n//           address: \"\",\r\n//           code:\"\",\r\n//           commune:\"\",\r\n//           district:\"\",\r\n//           province:\"\"\r\n         \r\n          \r\n//         };\r\n//       this.handleTextChange = this.handleTextChange.bind(this)\r\n//     }\r\n//     handleTextChange(event) {\r\n//       this.setState({ keyword: event.target.value })\r\n//     }\r\n  \r\n//     handleKeyDownEnterSearch = (e) => {\r\n//       if (e.key === 'Enter') {\r\n//         this.search()\r\n//       }\r\n//     }\r\n//     async componentDidMount() {\r\n//         const searchObject = {\r\n//             name:'',\r\n//             id:'',\r\n//             email:'',\r\n//             age:'',\r\n//             code:'',\r\n//             phone:''\r\n//           }; // assume we have an employee ID\r\n//           const employee = await searchEmployee(searchObject);\r\n//           this.setState({ employee });\r\n//           console.log(\"khanh\");\r\n//           searchEmployee({})\r\n//             .then(res =>{\r\n//               console.log(res.data.data);\r\n//               this.setState({\r\n//                 employees:res.data.data\r\n//               });\r\n//             })\r\n//       this.updatePageData()\r\n//     }\r\n//     getListItemChild(item) {\r\n//       var result = [];\r\n//       var root = {};\r\n//       root.name = item.name;\r\n//       root.description = item.description;\r\n//       root.code = item.code;\r\n//       root.icon = item.icon;\r\n//       root.path = item.path;\r\n//       root.id = item.id;\r\n//       root.parentId = item.parentId;\r\n//       result.push(root);\r\n//       if (item.children) {\r\n//         item.children.forEach(child => {\r\n//           var childs = this.getListItemChild(child);\r\n//           result.push(...childs);\r\n//         });\r\n//       }\r\n//       return result;\r\n//     }\r\n//     updatePageData = () => {\r\n//       var searchObject = {}\r\n//       searchObject.keyword = ''\r\n//       searchObject.pageIndex = this.state.page + 1\r\n//       searchObject.pageSize = this.state.rowsPerPage\r\n//       getAllByRoot().then(({ data }) => {\r\n//         var itemList = [...data];\r\n//         var list = [];\r\n//         itemList.forEach(item => {\r\n//           var items = this.getListItemChild(item);\r\n//           list.push(...items);\r\n//         });\r\n//         this.setState({ itemList: list });\r\n//       })\r\n//     }\r\n//     setPage = (page) => {\r\n//       this.setState({ page }, function () {\r\n//         this.updatePageData()\r\n//       })\r\n//     }\r\n  \r\n//     setRowsPerPage = (event) => {\r\n//       this.setState({ rowsPerPage: event.target.value, page: 0 }, function () {\r\n//         this.updatePageData()\r\n//       })\r\n//     }\r\n  \r\n//     handleChangePage = (event, newPage) => {\r\n//       this.setPage(newPage)\r\n//     }\r\n  \r\n//     handleOKEditClose = () => {\r\n//       this.setState(\r\n//         {\r\n//           shouldOpenEditorDialog: false,\r\n//           shouldOpenConfirmationDialog: false,\r\n//         },\r\n//         () => {\r\n//           this.updatePageData()\r\n//         }\r\n//       )\r\n//     }\r\n  \r\n//     handleDelete = (id) => {\r\n//       this.setState({\r\n//         id,\r\n//         shouldOpenConfirmationDialog: true,\r\n//       })\r\n//     }\r\n//     handleDialogClose = () => {\r\n//       this.setState(\r\n//         {\r\n//           shouldOpenEditorDialog: false,\r\n//           shouldOpenConfirmationDialog: false,\r\n//           shouldOpenConfirmationDeleteAllDialog: false,\r\n//           shouldOpenNotificationPopup: false,\r\n//           data: [],\r\n//         },\r\n//         () => {\r\n//           this.updatePageData()\r\n//         }\r\n//       )\r\n//     }\r\n  \r\n//     handleOKEditClose = () => {\r\n//       this.setState({\r\n//         shouldOpenEditorDialog: false,\r\n//         shouldOpenConfirmationDialog: false,\r\n//         shouldOpenConfirmationDeleteAllDialog: false,\r\n//       })\r\n//       this.setPage(0)\r\n//     }\r\n  \r\n//     handleDelete = (id) => {\r\n//       this.setState({\r\n//         id,\r\n//         shouldOpenConfirmationDialog: true,\r\n//       })\r\n//     }\r\n  \r\n//     handleConfirmationResponse = () => {\r\n//       if (this.state.itemList.length === 1 && this.state.page === 1) {\r\n//         let count = this.state.page - 1\r\n//         this.setState({\r\n//           page: count,\r\n//         })\r\n//       }\r\n//       deleteItem(this.state.id).then(() => {\r\n//         this.updatePageData();\r\n//         this.handleDialogClose()\r\n//       })\r\n//     }\r\n//     handleEditItem = (item) => {\r\n//       this.setState({\r\n//         item: item,\r\n//         shouldOpenEditorDialog: true,\r\n//       })\r\n  \r\n//     }\r\n//     handleDeleteButtonClick = () => {\r\n//       if (\r\n//         typeof this.state.data === 'undefined' ||\r\n//         this.state.data.length === 0\r\n//       ) {\r\n//         this.setState({\r\n//           shouldOpenNotificationPopup: true,\r\n//           Notification: \"general.noti_check_data\"\r\n//         })\r\n//         // alert('Chưa chọn dữ liệu')\r\n//       } else {\r\n//         this.setState({ shouldOpenConfirmationDeleteAllDialog: true })\r\n//       }\r\n//     }\r\n//     handleDeleteAll = (event) => {\r\n//       this.handleDeleteList(this.state.data).then(() => {\r\n//         this.updatePageData()\r\n//         // this.handleDialogClose()\r\n//       })\r\n//     }\r\n//     render() {\r\n//         const { t, i18n } = this.props\r\n//         let { keyword, shouldOpenNotificationPopup } = this.state\r\n//         const { employees } = this.state;\r\n\r\n//         let TitlePage = t('menu.title')\r\n    \r\n//         let columns = [\r\n//             {\r\n//                 title: t('general.action'),\r\n//                 field: 'custom',\r\n//                 align: 'left',\r\n//                 width: '120px',\r\n//                 headerStyle: {\r\n//                   minWidth: \"100px\",\r\n//                   paddingLeft: \"0px\",\r\n//                   paddingRight: \"0px\",\r\n//                 },\r\n//                 cellStyle: {\r\n//                   minWidth: \"100px\",\r\n//                   paddingLeft: \"0px\",\r\n//                   paddingRight: \"0px\",\r\n//                   textAlign: \"left\",\r\n//                 },\r\n//                 render: (rowData) => (\r\n//                   <MaterialButton\r\n//                     item={rowData}\r\n//                     onSelect={(rowData, method) => {\r\n//                       if (method === 0) {\r\n//                         getItemById(rowData.id).then(({ data }) => {\r\n//                           if (data.parent === null) {\r\n//                             data.parent = {}\r\n//                           }\r\n//                           this.setState({\r\n//                             item: data,\r\n//                             shouldOpenEditorDialog: true,\r\n//                           })\r\n//                         })\r\n//                       } else if (method === 1) {\r\n//                         this.handleDelete(rowData.id)\r\n//                       } else {\r\n//                         alert('Call Selected Here:' + rowData.id)\r\n//                       }\r\n//                     }}\r\n//                   />\r\n//                 ),\r\n//               },\r\n//             { title: \"ID\", field: \"id\" },\r\n//             { title: \"Name\", field: \"name\" },\r\n//             { title: \"Age\", field: \"age\" },\r\n//           {\r\n//             title: t('menu.name'), field: 'name', width: '150',\r\n//             headerStyle: {\r\n//               minWidth: \"150px\",\r\n//               paddingLeft: \"10px\",\r\n//               paddingRight: \"0px\",\r\n//             },\r\n//             cellStyle: {\r\n//               minWidth: \"150px\",\r\n//               paddingLeft: \"10px\",\r\n//               paddingRight: \"0px\",\r\n//               textAlign: \"left\",\r\n//             },\r\n//           },\r\n//           {\r\n//             title: t('menu.code'), field: 'code', align: 'left', width: '150',\r\n//             headerStyle: {\r\n//               minWidth: \"100px\",\r\n//               paddingLeft: \"10px\",\r\n//               paddingRight: \"0px\",\r\n//             },\r\n//             cellStyle: {\r\n//               minWidth: \"100px\",\r\n//               paddingLeft: \"10px\",\r\n//               paddingRight: \"0px\",\r\n//               textAlign: \"left\",\r\n//             },\r\n//           },\r\n    \r\n//         ]\r\n//         return (\r\n          \r\n//           <div className=\"m-sm-30\">\r\n//             <Helmet>\r\n//               <title>{TitlePage} | {t('web_site')}</title>\r\n//             </Helmet>\r\n//             <div className=\"mb-sm-30\">\r\n//               {/* <Breadcrumb routeSegments={[{ name: t('Supplier.title') }]} /> */}\r\n//               <Breadcrumb\r\n//                 routeSegments={[\r\n//                   { name: t(\"Dashboard.manage\"), path: \"/directory/apartment\" },\r\n//                   { name: TitlePage },\r\n//                 ]}\r\n//               />\r\n//             </div>\r\n//             <Grid container spacing={2} justify=\"space-between\">\r\n//               <Grid item lg={3} md={3} xs={12} >\r\n//                 <Button\r\n//                   className=\"align-bottom mr-16 mb-16\"\r\n//                   variant=\"contained\"\r\n//                   color=\"primary\"\r\n//                   onClick={() => this.handleEditItem(null)}\r\n//                 >\r\n//                   {t('general.add')}\r\n//                 </Button>\r\n//                 {/* <Button\r\n//                   className=\"align-bottom mb-16\"\r\n//                   variant=\"contained\"\r\n//                   color=\"primary\"\r\n//                   onClick={this.handleDeleteButtonClick}\r\n//                 >\r\n//                   {t('general.delete')}\r\n//                 </Button> */}\r\n    \r\n//                 {this.state.shouldOpenConfirmationDeleteAllDialog && (\r\n//                   <ConfirmationDialog\r\n//                     open={this.state.shouldOpenConfirmationDeleteAllDialog}\r\n//                     onConfirmDialogClose={this.handleDialogClose}\r\n//                     onYesClick={this.handleDeleteAll}\r\n//                     text={t('general.deleteAllConfirm')}\r\n//                     cancel={t('general.cancel')}\r\n//                     agree={t('general.agree')}\r\n//                   />\r\n//                 )}\r\n//                 {/* <TextField\r\n//                   label={t('Supplier.search')}\r\n//                   className=\"mb-16 mr-10\"\r\n//                   style={{ width: '20%' }}\r\n//                   type=\"text\"\r\n//                   name=\"keyword\"\r\n//                   value={keyword}\r\n//                   onChange={this.handleTextChange}\r\n//                   onKeyDown={this.handleKeyDownEnterSearch}\r\n//                 />\r\n//                 <Button\r\n//                   className=\"mb-16 mr-16 align-bottom\"\r\n//                   variant=\"contained\"\r\n//                   color=\"primary\"\r\n//                   onClick={() => this.search(keyword)}\r\n//                 >\r\n//                   {t('general.search')}\r\n//                 </Button> */}\r\n//               </Grid>\r\n//               {/* <Grid item md={6} sm={12} xs={12} >\r\n//                 <FormControl fullWidth style={{marginTop:'6px'}}>\r\n//                     <Input\r\n//                         className='search_box w-100'\r\n//                         onChange={this.handleTextChange}\r\n//                         onKeyDown={this.handleKeyDownEnterSearch}\r\n//                         placeholder={t(\"Supplier.search\")}\r\n//                         id=\"search_box\"\r\n//                         startAdornment={\r\n//                             <InputAdornment>\r\n//                                  <Link> <SearchIcon \r\n//                                 onClick={() => this.search(keyword)}\r\n//                                 style ={{position:\"absolute\",\r\n//                                 top:\"0\",\r\n//                                 right:\"0\"\r\n//                               }} /></Link>\r\n//                             </InputAdornment>\r\n//                         }\r\n//                     />\r\n//                 </FormControl>\r\n//               </Grid> */}\r\n//               <Grid item xs={12}>\r\n//                 <div>\r\n//                   {/* {this.state.shouldOpenEditorDialog && (\r\n//                     <EmployeeDialog\r\n//                       t={t}\r\n//                       i18n={i18n}\r\n//                       handleClose={this.handleDialogClose}\r\n//                       open={this.state.shouldOpenEditorDialog}\r\n//                       handleOKEditClose={this.handleOKEditClose}\r\n//                       item={this.state.item}\r\n//                     />\r\n//                   )} */}\r\n    \r\n//                   {shouldOpenNotificationPopup && (\r\n//                     <NotificationPopup\r\n//                       title={t('general.noti')}\r\n//                       open={shouldOpenNotificationPopup}\r\n//                       // onConfirmDialogClose={this.handleDialogClose}\r\n//                       onYesClick={this.handleDialogClose}\r\n//                       text={t(this.state.Notification)}\r\n//                       agree={t('general.agree')}\r\n//                     />\r\n//                   )}\r\n    \r\n//                   {this.state.shouldOpenConfirmationDialog && (\r\n//                     <ConfirmationDialog\r\n//                       title={t(\"confirm\")}\r\n//                       open={this.state.shouldOpenConfirmationDialog}\r\n//                       onConfirmDialogClose={this.handleDialogClose}\r\n//                       onYesClick={this.handleConfirmationResponse}\r\n//                       text={t(\"DeleteConfirm\")}\r\n//                       Yes={t(\"general.Yes\")}\r\n//                       No={t(\"general.No\")}\r\n//                     />\r\n//                   )}\r\n//                 </div>\r\n//                 <MaterialTable\r\n//         title=\"Employee List\"\r\n//         data={employees}\r\n//         columns={columns}\r\n//         options={{\r\n//           selection: false,\r\n//           actionsColumnIndex: -1,\r\n//           paging: false,\r\n//           search: false,\r\n//           rowStyle: (rowData, index) => ({\r\n//             backgroundColor: index % 2 === 1 ? '#EEE' : '#FFF',\r\n//           }),\r\n//           maxBodyHeight: '450px',\r\n//           minBodyHeight: '370px',\r\n//           headerStyle: {\r\n//             backgroundColor: '#358600',\r\n//             color: '#fff',\r\n//           },\r\n//           padding: 'dense',\r\n//           toolbar: false,\r\n//         }}\r\n//         components={{\r\n//           Toolbar: (props) => <MTableToolbar {...props} />,\r\n//         }}\r\n//         onSelectionChange={(rows) => {\r\n//           this.setState({ data: rows });\r\n//         }}\r\n//       />\r\n//                 <TablePagination\r\n//                   align=\"left\"\r\n//                   className=\"px-16\"\r\n//                   rowsPerPageOptions={[1, 2, 3, 5, 10, 25]}\r\n//                   component=\"div\"\r\n//                   labelRowsPerPage={t('general.rows_per_page')}\r\n//                   labelDisplayedRows={({ from, to, count }) => `${from}-${to} ${t('general.of')} ${count !== -1 ? count : `more than ${to}`}`}\r\n//                   count={this.state.totalElements}\r\n//                   rowsPerPage={this.state.rowsPerPage}\r\n//                   page={this.state.page}\r\n//                   backIconButtonProps={{\r\n//                     'aria-label': 'Previous Page',\r\n//                   }}\r\n//                   nextIconButtonProps={{\r\n//                     'aria-label': 'Next Page',\r\n//                   }}\r\n//                   onChangePage={this.handleChangePage}\r\n//                   onChangeRowsPerPage={this.setRowsPerPage}\r\n//                 />\r\n//               </Grid>\r\n//             </Grid>\r\n//           </div>\r\n//         )\r\n//       }\r\n//     }\r\n//     export default Employee;\r\n    "]},"metadata":{},"sourceType":"module"}